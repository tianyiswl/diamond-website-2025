# ===================================
# Git自动化解决方案 - 自动发布流程
# 版本标签和发布自动化
# ===================================

name: 🏷️ 自动发布

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配版本标签 (v1.0.0, v2.1.3等)
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.0)'
        required: true
        type: string
      release_type:
        description: '发布类型'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  TIMEZONE: 'Asia/Shanghai'

jobs:
  # ===================================
  # 版本验证和准备
  # ===================================
  prepare-release:
    name: 📋 准备发布
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于生成变更日志
    
    - name: 🏗️ 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🔍 确定版本信息
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # 从标签获取版本
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          IS_PRERELEASE=false
        else
          # 从手动输入获取版本
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
        
        echo "📋 发布信息:"
        echo "   版本: ${VERSION}"
        echo "   标签: ${TAG}"
        echo "   预发布: ${IS_PRERELEASE}"
    
    - name: 📝 生成变更日志
      id: changelog
      run: |
        echo "📝 生成变更日志..."
        
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "📋 首次发布，生成完整变更日志"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "📋 从 $PREVIOUS_TAG 到当前的变更"
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # 按类型分类变更
        FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature\|add" || echo "")
        FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug" || echo "")
        DOCS=$(echo "$CHANGELOG" | grep -i "doc\|readme" || echo "")
        OTHERS=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|doc\|readme" || echo "")
        
        # 构建格式化的变更日志
        FORMATTED_CHANGELOG="## 🚀 版本 ${{ steps.version.outputs.version }}

📅 发布时间: $(date '+%Y-%m-%d %H:%M:%S')
🌿 分支: ${{ github.ref_name }}
👤 发布者: ${{ github.actor }}

"
        
        if [ -n "$FEATURES" ]; then
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### ✨ 新功能
$FEATURES

"
        fi
        
        if [ -n "$FIXES" ]; then
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 🐛 问题修复
$FIXES

"
        fi
        
        if [ -n "$DOCS" ]; then
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 📚 文档更新
$DOCS

"
        fi
        
        if [ -n "$OTHERS" ]; then
          FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 🔧 其他变更
$OTHERS

"
        fi
        
        # 添加统计信息
        COMMIT_COUNT=$(git rev-list --count ${PREVIOUS_TAG}..HEAD 2>/dev/null || git rev-list --count HEAD)
        FILES_CHANGED=$(git diff --name-only ${PREVIOUS_TAG}..HEAD 2>/dev/null | wc -l || echo "N/A")
        
        FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 📊 统计信息
- 提交数量: $COMMIT_COUNT
- 文件变更: $FILES_CHANGED
- 上个版本: ${PREVIOUS_TAG:-"首次发布"}

"
        
        # 保存到文件和输出
        echo "$FORMATTED_CHANGELOG" > RELEASE_CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "✅ 变更日志生成完成"
    
    - name: 📈 上传变更日志
      uses: actions/upload-artifact@v4
      with:
        name: release-changelog
        path: RELEASE_CHANGELOG.md
        retention-days: 90

  # ===================================
  # 构建发布包
  # ===================================
  build-release:
    name: 🏗️ 构建发布包
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 🏗️ 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 安装依赖
      run: npm ci
    
    - name: 🔍 运行发布前检查
      run: |
        echo "🔍 运行发布前检查..."
        
        # 语法检查
        echo "📝 语法检查..."
        npm run test 2>/dev/null || echo "跳过测试（未配置）"
        
        # 安全检查
        echo "🔒 安全检查..."
        npm audit --audit-level=high || echo "安全检查完成"
        
        # 依赖检查
        echo "📦 依赖检查..."
        npm ls --depth=0 || echo "依赖检查完成"
    
    - name: 🏗️ 构建生产版本
      run: |
        echo "🏗️ 构建生产版本..."
        
        # 设置生产环境
        export NODE_ENV=production
        export TZ=${{ env.TIMEZONE }}
        
        # 更新版本号
        npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version
        
        # 构建应用（如果有构建脚本）
        if npm run build 2>/dev/null; then
          echo "✅ 应用构建完成"
        else
          echo "ℹ️ 没有构建脚本，跳过构建步骤"
        fi
        
        echo "✅ 生产版本准备完成"
    
    - name: 📦 创建发布包
      run: |
        echo "📦 创建发布包..."
        
        # 创建发布目录
        mkdir -p release
        
        # 复制应用文件
        cp -r . release/
        cd release
        
        # 清理不需要的文件
        rm -rf .git .github .githooks git-scripts
        rm -rf node_modules/.cache
        rm -f .gitignore .env.example *.log
        rm -f RELEASE_CHANGELOG.md
        
        # 重新安装生产依赖
        npm ci --only=production
        
        # 创建压缩包
        cd ..
        tar -czf diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz release/
        zip -r diamond-website-${{ needs.prepare-release.outputs.version }}.zip release/
        
        # 生成校验和
        sha256sum diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz > checksums.txt
        sha256sum diamond-website-${{ needs.prepare-release.outputs.version }}.zip >> checksums.txt
        
        echo "✅ 发布包创建完成"
        
        # 显示包信息
        echo "📊 发布包信息:"
        ls -lh diamond-website-*
        cat checksums.txt
    
    - name: 📈 上传发布包
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz
          diamond-website-${{ needs.prepare-release.outputs.version }}.zip
          checksums.txt
        retention-days: 90

  # ===================================
  # 创建GitHub Release
  # ===================================
  create-release:
    name: 🚀 创建GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    permissions:
      contents: write
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 📦 下载发布包
      uses: actions/download-artifact@v4
      with:
        name: release-packages
    
    - name: 📦 下载变更日志
      uses: actions/download-artifact@v4
      with:
        name: release-changelog
    
    - name: 🏷️ 创建Git标签
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "🏷️ 创建Git标签: ${{ needs.prepare-release.outputs.tag }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a ${{ needs.prepare-release.outputs.tag }} -m "Release ${{ needs.prepare-release.outputs.version }}"
        git push origin ${{ needs.prepare-release.outputs.tag }}
    
    - name: 🚀 创建GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        release_name: 🚀 Release ${{ needs.prepare-release.outputs.version }}
        body_path: RELEASE_CHANGELOG.md
        draft: false
        prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
    
    - name: 📎 上传发布资产
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz
        asset_name: diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: 📎 上传ZIP包
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: diamond-website-${{ needs.prepare-release.outputs.version }}.zip
        asset_name: diamond-website-${{ needs.prepare-release.outputs.version }}.zip
        asset_content_type: application/zip
    
    - name: 📎 上传校验和
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # ===================================
  # 发布后处理
  # ===================================
  post-release:
    name: 📢 发布后处理
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 📊 更新发布统计
      run: |
        echo "📊 更新发布统计..."
        
        # 创建发布记录
        mkdir -p .release-history
        cat > .release-history/${{ needs.prepare-release.outputs.version }}.json << EOF
        {
          "version": "${{ needs.prepare-release.outputs.version }}",
          "tag": "${{ needs.prepare-release.outputs.tag }}",
          "date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "actor": "${{ github.actor }}",
          "commit": "${{ github.sha }}",
          "prerelease": ${{ needs.prepare-release.outputs.is_prerelease }},
          "workflow_run": "${{ github.run_id }}"
        }
        EOF
        
        echo "✅ 发布记录已保存"
    
    - name: 📢 发送发布通知
      run: |
        echo "📢 发送发布通知..."
        echo "🎉 新版本发布成功！"
        echo ""
        echo "📋 发布信息:"
        echo "   版本: ${{ needs.prepare-release.outputs.version }}"
        echo "   标签: ${{ needs.prepare-release.outputs.tag }}"
        echo "   时间: $(date)"
        echo "   发布者: ${{ github.actor }}"
        echo "   预发布: ${{ needs.prepare-release.outputs.is_prerelease }}"
        echo ""
        echo "🔗 链接:"
        echo "   Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"
        echo "   Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
        echo ""
        echo "📦 下载:"
        echo "   TAR.GZ: https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.tag }}/diamond-website-${{ needs.prepare-release.outputs.version }}.tar.gz"
        echo "   ZIP: https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.tag }}/diamond-website-${{ needs.prepare-release.outputs.version }}.zip"
        
        # 这里可以添加实际的通知逻辑
        # 例如：Slack, 钉钉, 邮件, Webhook等
    
    - name: 🔄 触发部署流程
      if: needs.prepare-release.outputs.is_prerelease == 'false'
      run: |
        echo "🔄 触发生产环境部署..."
        echo "📦 部署版本: ${{ needs.prepare-release.outputs.version }}"
        
        # 这里可以触发实际的部署流程
        # 例如：调用部署API、触发其他workflow等
        
        echo "✅ 部署流程已触发"
