#!/bin/bash
# ===================================
# Git自动化解决方案 - Pre-push钩子
# 在推送前执行最终验证和安全检查
# ===================================

set -e  # 遇到错误立即退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志文件
LOG_FILE=".pre-push.log"

# 记录日志函数
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# 打印带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}$message${NC}"
    log "$message"
}

# 获取推送信息
remote="$1"
url="$2"

print_message $BLUE "🚀 开始执行 Pre-push 检查..."
print_message $BLUE "📡 推送目标: $remote ($url)"

# 读取标准输入获取推送的引用信息
while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        # 删除分支
        print_message $YELLOW "🗑️  删除分支: $remote_ref"
        continue
    fi
    
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # 新分支
        print_message $BLUE "🌟 新分支: $local_ref -> $remote_ref"
        range="$local_sha"
    else
        # 更新现有分支
        print_message $BLUE "🔄 更新分支: $local_ref -> $remote_ref"
        range="$remote_sha..$local_sha"
    fi
    
    # 1. 检查提交历史
    print_message $BLUE "📚 检查提交历史..."
    
    commit_count=$(git rev-list --count $range 2>/dev/null || echo "0")
    print_message $BLUE "   推送提交数: $commit_count"
    
    if [ "$commit_count" -gt 20 ]; then
        print_message $YELLOW "⚠️  推送的提交数量较多 ($commit_count)，请确认是否正确"
        read -p "是否继续推送? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message $RED "❌ 用户取消推送"
            exit 1
        fi
    fi
    
    # 2. 检查提交信息质量
    print_message $BLUE "📝 检查提交信息质量..."
    
    bad_commits=()
    while IFS= read -r commit; do
        if [ -n "$commit" ]; then
            commit_msg=$(git log --format=%s -n 1 "$commit")
            
            # 检查提交信息长度
            if [ ${#commit_msg} -lt 10 ]; then
                bad_commits+=("$commit: 提交信息过短")
            elif [ ${#commit_msg} -gt 72 ]; then
                bad_commits+=("$commit: 提交信息过长")
            fi
            
            # 检查是否包含临时提交信息
            if echo "$commit_msg" | grep -iE "(wip|todo|fixme|temp|test)" >/dev/null; then
                bad_commits+=("$commit: 包含临时提交信息")
            fi
        fi
    done < <(git rev-list $range 2>/dev/null || true)
    
    if [ ${#bad_commits[@]} -gt 0 ]; then
        print_message $YELLOW "⚠️  发现提交信息问题:"
        for bad_commit in "${bad_commits[@]}"; do
            echo "   - $bad_commit"
        done
        
        read -p "是否继续推送? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message $RED "❌ 用户取消推送"
            exit 1
        fi
    fi
    
    # 3. 运行完整测试套件
    if [ -f "package.json" ] && grep -q '"test"' package.json; then
        print_message $BLUE "🧪 运行完整测试套件..."
        
        if npm test; then
            print_message $GREEN "✅ 所有测试通过"
        else
            print_message $RED "❌ 测试失败"
            print_message $RED "请修复测试问题后重新推送"
            exit 1
        fi
    fi
    
    # 4. 检查依赖安全性
    if command -v npm >/dev/null 2>&1; then
        print_message $BLUE "🔒 检查依赖安全性..."
        
        if npm audit --audit-level=high 2>/dev/null; then
            print_message $GREEN "✅ 依赖安全检查通过"
        else
            print_message $YELLOW "⚠️  发现安全漏洞，建议运行 'npm audit fix'"
            
            read -p "是否继续推送? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                print_message $RED "❌ 用户取消推送"
                exit 1
            fi
        fi
    fi
    
    # 5. 检查分支保护
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    protected_branches=("main" "master" "production" "release")
    
    for protected in "${protected_branches[@]}"; do
        if [ "$current_branch" = "$protected" ]; then
            print_message $YELLOW "⚠️  正在推送到保护分支: $protected"
            
            read -p "确认推送到保护分支? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                print_message $RED "❌ 用户取消推送到保护分支"
                exit 1
            fi
            break
        fi
    done
    
    # 6. 检查文件变更规模
    print_message $BLUE "📊 分析文件变更..."
    
    files_changed=$(git diff --name-only $range 2>/dev/null | wc -l || echo "0")
    lines_added=$(git diff --shortstat $range 2>/dev/null | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
    lines_deleted=$(git diff --shortstat $range 2>/dev/null | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
    
    print_message $BLUE "   文件变更: $files_changed 个"
    print_message $BLUE "   新增行数: $lines_added"
    print_message $BLUE "   删除行数: $lines_deleted"
    
    if [ "$files_changed" -gt 50 ] || [ "$lines_added" -gt 1000 ]; then
        print_message $YELLOW "⚠️  变更规模较大，请确认是否正确"
        
        read -p "是否继续推送? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message $RED "❌ 用户取消推送"
            exit 1
        fi
    fi
    
    # 7. 创建推送备份
    print_message $BLUE "💾 创建推送备份..."
    
    backup_dir=".git-backup"
    mkdir -p "$backup_dir"
    
    backup_file="$backup_dir/push-backup-$(date +%Y%m%d-%H%M%S).txt"
    {
        echo "推送时间: $(date)"
        echo "分支: $local_ref -> $remote_ref"
        echo "提交范围: $range"
        echo "提交数量: $commit_count"
        echo "文件变更: $files_changed"
        echo "新增行数: $lines_added"
        echo "删除行数: $lines_deleted"
        echo ""
        echo "提交列表:"
        git log --oneline $range 2>/dev/null || true
    } > "$backup_file"
    
    print_message $GREEN "✅ 备份已保存: $backup_file"
    
    # 8. 最终确认
    if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
        print_message $YELLOW "🚨 最终确认: 即将推送到主分支"
        print_message $BLUE "   分支: $current_branch"
        print_message $BLUE "   提交: $commit_count 个"
        print_message $BLUE "   文件: $files_changed 个"
        
        read -p "最终确认推送? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message $RED "❌ 用户取消推送"
            exit 1
        fi
    fi
    
done

print_message $GREEN "🎉 Pre-push 检查全部通过！"
print_message $BLUE "📡 准备推送到: $remote"
print_message $BLUE "🕐 推送时间: $(date '+%Y-%m-%d %H:%M:%S')"

exit 0
