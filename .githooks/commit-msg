#!/bin/bash
# ===================================
# Git自动化解决方案 - Commit-msg钩子
# 规范和验证提交信息格式
# ===================================

set -e  # 遇到错误立即退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志文件
LOG_FILE=".commit-msg.log"

# 提交信息文件
COMMIT_MSG_FILE="$1"

# 记录日志函数
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# 打印带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}$message${NC}"
    log "$message"
}

print_message $BLUE "📝 开始验证提交信息..."

# 读取提交信息
commit_msg=$(cat "$COMMIT_MSG_FILE")

# 移除注释行和空行
clean_msg=$(echo "$commit_msg" | grep -v '^#' | grep -v '^$' | head -1)

print_message $BLUE "原始提交信息: $clean_msg"

# 1. 检查提交信息是否为空
if [ -z "$clean_msg" ]; then
    print_message $RED "❌ 提交信息不能为空"
    print_message $YELLOW "💡 提示: 请提供有意义的提交信息"
    exit 1
fi

# 2. 检查提交信息长度
msg_length=${#clean_msg}
if [ $msg_length -lt 10 ]; then
    print_message $RED "❌ 提交信息过短 (当前: $msg_length 字符，最少: 10 字符)"
    print_message $YELLOW "💡 提示: 请提供更详细的提交信息"
    exit 1
fi

if [ $msg_length -gt 72 ]; then
    print_message $YELLOW "⚠️  提交信息较长 (当前: $msg_length 字符，建议: ≤72 字符)"
    print_message $YELLOW "💡 建议: 将详细说明放在提交信息的第二段"
fi

# 3. 检查提交信息格式 (Conventional Commits)
valid_types=("feat" "fix" "docs" "style" "refactor" "test" "chore" "perf" "ci" "build" "revert")
type_pattern="^($(IFS="|"; echo "${valid_types[*]}"))"

if echo "$clean_msg" | grep -qE "$type_pattern"; then
    # 提取提交类型
    commit_type=$(echo "$clean_msg" | sed -E 's/^([a-z]+)(\([^)]+\))?: .*/\1/')
    print_message $GREEN "✅ 检测到规范的提交类型: $commit_type"
    
    # 检查格式是否完整
    if ! echo "$clean_msg" | grep -qE "^[a-z]+(\([^)]+\))?: .+"; then
        print_message $RED "❌ 提交信息格式不正确"
        print_message $YELLOW "💡 正确格式: type(scope): description"
        print_message $YELLOW "   例如: feat(auth): 添加用户登录功能"
        exit 1
    fi
else
    print_message $YELLOW "⚠️  未使用规范的提交类型"
    print_message $BLUE "📋 建议使用以下类型之一:"
    for type in "${valid_types[@]}"; do
        case $type in
            "feat")     echo "   - feat:     新功能" ;;
            "fix")      echo "   - fix:      修复bug" ;;
            "docs")     echo "   - docs:     文档更新" ;;
            "style")    echo "   - style:    代码格式化" ;;
            "refactor") echo "   - refactor: 重构代码" ;;
            "test")     echo "   - test:     添加或修改测试" ;;
            "chore")    echo "   - chore:    构建过程或辅助工具的变动" ;;
            "perf")     echo "   - perf:     性能优化" ;;
            "ci")       echo "   - ci:       CI/CD配置" ;;
            "build")    echo "   - build:    构建系统" ;;
            "revert")   echo "   - revert:   回滚提交" ;;
        esac
    done
    
    # 询问是否要自动格式化
    if [ -t 0 ]; then  # 检查是否在交互式终端中
        read -p "是否要自动格式化提交信息? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_message $BLUE "🔧 自动格式化提交信息..."
            
            # 尝试智能识别提交类型
            auto_type="chore"
            if echo "$clean_msg" | grep -iE "(add|新增|添加|create|创建)" >/dev/null; then
                auto_type="feat"
            elif echo "$clean_msg" | grep -iE "(fix|修复|解决|bug)" >/dev/null; then
                auto_type="fix"
            elif echo "$clean_msg" | grep -iE "(doc|文档|readme)" >/dev/null; then
                auto_type="docs"
            elif echo "$clean_msg" | grep -iE "(test|测试)" >/dev/null; then
                auto_type="test"
            elif echo "$clean_msg" | grep -iE "(refactor|重构|优化)" >/dev/null; then
                auto_type="refactor"
            fi
            
            # 格式化提交信息
            formatted_msg="$auto_type: $clean_msg"
            echo "$formatted_msg" > "$COMMIT_MSG_FILE"
            
            print_message $GREEN "✅ 已格式化为: $formatted_msg"
        fi
    fi
fi

# 4. 检查禁用词汇
forbidden_words=("fuck" "shit" "damn" "stupid" "idiot" "wtf" "临时" "测试提交" "随便提交")
for word in "${forbidden_words[@]}"; do
    if echo "$clean_msg" | grep -iE "$word" >/dev/null; then
        print_message $RED "❌ 提交信息包含不当词汇: $word"
        print_message $YELLOW "💡 请使用专业的提交信息"
        exit 1
    fi
done

# 5. 检查是否包含issue或ticket引用
if echo "$clean_msg" | grep -E "#[0-9]+" >/dev/null; then
    issue_ref=$(echo "$clean_msg" | grep -oE "#[0-9]+" | head -1)
    print_message $GREEN "✅ 检测到issue引用: $issue_ref"
elif echo "$clean_msg" | grep -iE "(close|closes|fix|fixes|resolve|resolves)" >/dev/null; then
    print_message $YELLOW "⚠️  检测到关闭关键词但未找到issue引用"
    print_message $YELLOW "💡 建议添加issue引用，如: closes #123"
fi

# 6. 检查提交信息语言
if echo "$clean_msg" | grep -E "[\u4e00-\u9fa5]" >/dev/null; then
    print_message $BLUE "🌏 检测到中文提交信息"
elif echo "$clean_msg" | grep -E "[a-zA-Z]" >/dev/null; then
    print_message $BLUE "🌍 检测到英文提交信息"
fi

# 7. 生成提交统计
current_branch=$(git rev-parse --abbrev-ref HEAD)
commit_count=$(git rev-list --count HEAD 2>/dev/null || echo "1")

print_message $BLUE "📊 提交统计信息:"
echo "   - 当前分支: $current_branch"
echo "   - 提交序号: #$commit_count"
echo "   - 信息长度: $msg_length 字符"
echo "   - 验证时间: $(date '+%Y-%m-%d %H:%M:%S')"

# 8. 保存提交历史
commit_history_file=".git-commit-history.log"
{
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $current_branch | $clean_msg"
} >> "$commit_history_file"

# 9. 检查连续相似提交
if [ -f "$commit_history_file" ]; then
    recent_commits=$(tail -5 "$commit_history_file" | cut -d'|' -f3 | tr -d ' ')
    current_msg_clean=$(echo "$clean_msg" | tr -d ' ')
    
    similar_count=0
    while IFS= read -r line; do
        if [ "$line" = "$current_msg_clean" ]; then
            similar_count=$((similar_count + 1))
        fi
    done <<< "$recent_commits"
    
    if [ $similar_count -gt 1 ]; then
        print_message $YELLOW "⚠️  检测到相似的提交信息 (最近5次中有 $similar_count 次)"
        print_message $YELLOW "💡 建议使用更具体的描述"
    fi
fi

# 10. 添加自动化标签
if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
    # 为非主分支添加分支标识
    if ! echo "$clean_msg" | grep -E "\[$current_branch\]" >/dev/null; then
        enhanced_msg="[$current_branch] $clean_msg"
        
        # 询问是否添加分支标识
        if [ -t 0 ]; then
            read -p "是否添加分支标识? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                echo "$enhanced_msg" > "$COMMIT_MSG_FILE"
                print_message $GREEN "✅ 已添加分支标识: [$current_branch]"
            fi
        fi
    fi
fi

print_message $GREEN "🎉 提交信息验证通过！"
print_message $BLUE "📝 最终提交信息: $(cat "$COMMIT_MSG_FILE" | grep -v '^#' | grep -v '^$' | head -1)"

exit 0
