#!/bin/bash
# ===================================
# Git自动化解决方案 - Pre-commit钩子
# 在提交前执行代码质量检查和格式化
# ===================================

set -e  # 遇到错误立即退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志文件
LOG_FILE=".pre-commit.log"

# 记录日志函数
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# 打印带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}$message${NC}"
    log "$message"
}

print_message $BLUE "🚀 开始执行 Pre-commit 检查..."

# 检查是否有暂存的文件
if git diff --cached --quiet; then
    print_message $YELLOW "⚠️  没有暂存的文件，跳过检查"
    exit 0
fi

# 获取暂存的文件列表
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
JSON_FILES=$(echo "$STAGED_FILES" | grep -E '\.json$' || true)
MD_FILES=$(echo "$STAGED_FILES" | grep -E '\.md$' || true)

print_message $BLUE "📁 检测到的文件类型："
echo "   JavaScript/TypeScript: $(echo "$JS_FILES" | wc -l) 个文件"
echo "   JSON: $(echo "$JSON_FILES" | wc -l) 个文件"
echo "   Markdown: $(echo "$MD_FILES" | wc -l) 个文件"

# 1. 检查Node.js语法错误
if [ -n "$JS_FILES" ]; then
    print_message $BLUE "🔍 检查JavaScript语法错误..."
    
    for file in $JS_FILES; do
        if [ -f "$file" ]; then
            # 使用Node.js检查语法
            if ! node -c "$file" 2>/dev/null; then
                print_message $RED "❌ 语法错误: $file"
                print_message $RED "请修复语法错误后重新提交"
                exit 1
            fi
        fi
    done
    
    print_message $GREEN "✅ JavaScript语法检查通过"
fi

# 2. 检查JSON文件格式
if [ -n "$JSON_FILES" ]; then
    print_message $BLUE "🔍 检查JSON文件格式..."
    
    for file in $JSON_FILES; do
        if [ -f "$file" ]; then
            if ! python -m json.tool "$file" > /dev/null 2>&1; then
                print_message $RED "❌ JSON格式错误: $file"
                print_message $RED "请修复JSON格式错误后重新提交"
                exit 1
            fi
        fi
    done
    
    print_message $GREEN "✅ JSON格式检查通过"
fi

# 3. 代码格式化（如果安装了prettier）
if command -v npx >/dev/null 2>&1 && npx prettier --version >/dev/null 2>&1; then
    if [ -n "$JS_FILES" ] || [ -n "$JSON_FILES" ] || [ -n "$MD_FILES" ]; then
        print_message $BLUE "🎨 执行代码格式化..."
        
        # 创建临时文件列表
        TEMP_FILE_LIST=$(mktemp)
        echo "$STAGED_FILES" > "$TEMP_FILE_LIST"
        
        # 格式化文件
        if npx prettier --write --list-different $(echo "$STAGED_FILES" | tr '\n' ' ') 2>/dev/null; then
            print_message $GREEN "✅ 代码格式化完成"
            
            # 重新添加格式化后的文件到暂存区
            for file in $STAGED_FILES; do
                if [ -f "$file" ]; then
                    git add "$file"
                fi
            done
        else
            print_message $YELLOW "⚠️  代码格式化跳过（prettier未正确配置）"
        fi
        
        rm -f "$TEMP_FILE_LIST"
    fi
else
    print_message $YELLOW "⚠️  Prettier未安装，跳过代码格式化"
fi

# 4. 检查敏感信息
print_message $BLUE "🔒 检查敏感信息..."

SENSITIVE_PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "private[_-]key\s*=\s*['\"][^'\"]*['\"]"
    "-----BEGIN.*PRIVATE KEY-----"
    "mongodb://[^:]*:[^@]*@"
    "mysql://[^:]*:[^@]*@"
    "postgres://[^:]*:[^@]*@"
)

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # 跳过Git钩子文件的敏感信息检查
        if [[ "$file" == .githooks/* ]]; then
            continue
        fi

        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
                print_message $RED "❌ 检测到敏感信息: $file"
                print_message $RED "   模式: $pattern"
                print_message $RED "请移除敏感信息或使用环境变量"
                exit 1
            fi
        done
    fi
done

print_message $GREEN "✅ 敏感信息检查通过"

# 5. 检查文件大小
print_message $BLUE "📏 检查文件大小..."

MAX_FILE_SIZE=5242880  # 5MB
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [ "$file_size" -gt "$MAX_FILE_SIZE" ]; then
            print_message $RED "❌ 文件过大: $file ($(($file_size / 1024 / 1024))MB)"
            print_message $RED "请确认是否需要提交此大文件"
            exit 1
        fi
    fi
done

print_message $GREEN "✅ 文件大小检查通过"

# 6. 运行基础测试（如果存在）
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    print_message $BLUE "🧪 运行基础测试..."
    
    if npm test 2>/dev/null; then
        print_message $GREEN "✅ 测试通过"
    else
        print_message $YELLOW "⚠️  测试失败或跳过，但允许提交"
        print_message $YELLOW "   建议在推送前修复测试问题"
    fi
fi

# 7. 检查提交信息模板
if [ ! -f ".gitmessage-template" ]; then
    print_message $BLUE "📝 创建提交信息模板..."
    cat > .gitmessage-template << 'EOF'
# 提交类型: 简短描述 (不超过50字符)
#
# 详细说明 (可选，每行不超过72字符)
# - 解释为什么做这个改动
# - 说明改动的影响
# - 提及相关的issue或ticket
#
# 提交类型说明:
# feat:     新功能
# fix:      修复bug
# docs:     文档更新
# style:    代码格式化
# refactor: 重构代码
# test:     添加或修改测试
# chore:    构建过程或辅助工具的变动
EOF
    print_message $GREEN "✅ 提交信息模板已创建"
fi

print_message $GREEN "🎉 Pre-commit 检查全部通过！"
print_message $BLUE "📊 检查统计:"
echo "   - 检查文件数: $(echo "$STAGED_FILES" | wc -l)"
echo "   - JavaScript文件: $(echo "$JS_FILES" | wc -l)"
echo "   - JSON文件: $(echo "$JSON_FILES" | wc -l)"
echo "   - Markdown文件: $(echo "$MD_FILES" | wc -l)"
echo "   - 检查时间: $(date '+%Y-%m-%d %H:%M:%S')"

exit 0
