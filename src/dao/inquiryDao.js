// üí¨ ËØ¢‰ª∑Êï∞ÊçÆËÆøÈóÆÂ±Ç
// ‰∏ìÈó®Â§ÑÁêÜÂÆ¢Êà∑ËØ¢‰ª∑Áõ∏ÂÖ≥ÁöÑÊï∞ÊçÆÊìç‰Ωú

const BaseDao = require('./baseDao');
const utils = require('../utils');

class InquiryDao extends BaseDao {
  constructor() {
    super('inquiries.json', []);
  }

  /**
   * Ëé∑ÂèñÊâÄÊúâËØ¢‰ª∑ÔºàÁÆÄÂçïÁâàÊú¨ÔºåËøîÂõûÊï∞ÁªÑÔºâ
   * @returns {Array} ËØ¢‰ª∑Êï∞ÁªÑ
   */
  getAllInquiries() {
    try {
      const inquiries = this.read();
      console.log(`üìä ËØªÂèñÂà∞ ${inquiries.length} Êù°ËØ¢‰ª∑ËÆ∞ÂΩï`);
      return inquiries;
    } catch (error) {
      console.error('Ëé∑ÂèñÊâÄÊúâËØ¢‰ª∑Â§±Ë¥•:', error);
      throw error;
    }
  }

  /**
   * Ëé∑ÂèñÊâÄÊúâËØ¢‰ª∑ÔºàÂàÜÈ°µÁâàÊú¨Ôºâ
   * @param {Object} options - Êü•ËØ¢ÈÄâÈ°π
   * @returns {Object} ÂåÖÂê´Êï∞ÊçÆÂíåÂàÜÈ°µ‰ø°ÊÅØÁöÑÂØπË±°
   */
  findAll(options = {}) {
    const {
      page = 1,
      limit = 20,
      status = '',
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = options;

    let inquiries = this.read();

    // Áä∂ÊÄÅÁ≠õÈÄâ
    if (status) {
      inquiries = inquiries.filter(inquiry => inquiry.status === status);
    }

    // ÊéíÂ∫è
    inquiries.sort((a, b) => {
      let valueA, valueB;

      switch (sortBy) {
        case 'name':
          valueA = (a.name || '').toLowerCase();
          valueB = (b.name || '').toLowerCase();
          break;
        case 'email':
          valueA = (a.email || '').toLowerCase();
          valueB = (b.email || '').toLowerCase();
          break;
        case 'createdAt':
        default:
          valueA = new Date(a.createdAt || 0);
          valueB = new Date(b.createdAt || 0);
          break;
      }

      if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1;
      if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1;
      return 0;
    });

    // ÂàÜÈ°µ
    const total = inquiries.length;
    const totalPages = Math.ceil(total / limit);
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedInquiries = inquiries.slice(startIndex, endIndex);

    return {
      data: paginatedInquiries,
      pagination: {
        current: page,
        total: totalPages,
        limit: limit,
        totalItems: total,
        hasNext: page < totalPages,
        hasPrev: page > 1
      }
    };
  }

  /**
   * Ê†πÊçÆIDÊü•ÊâæËØ¢‰ª∑
   * @param {string} id - ËØ¢‰ª∑ID
   * @returns {Object|null} ËØ¢‰ª∑ÂØπË±°Êàñnull
   */
  findById(id) {
    const inquiries = this.read();
    return inquiries.find(inquiry => inquiry.id === id) || null;
  }

  /**
   * ÂàõÂª∫Êñ∞ËØ¢‰ª∑
   * @param {Object} inquiryData - ËØ¢‰ª∑Êï∞ÊçÆ
   * @returns {Object} ÂàõÂª∫ÁªìÊûú
   */
  create(inquiryData) {
    try {
      // È™åËØÅËØ¢‰ª∑Êï∞ÊçÆ
      const validation = utils.validateInquiry(inquiryData);
      if (!validation.isValid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      const inquiries = this.read();
      
      // ÁîüÊàêÊñ∞ID
      const newId = utils.generateUUID();

      // ÂàõÂª∫ËØ¢‰ª∑ÂØπË±°
      const newInquiry = {
        id: newId,
        name: utils.sanitizeString(inquiryData.name),
        email: inquiryData.email.toLowerCase().trim(),
        phone: utils.sanitizeString(inquiryData.phone || ''),
        company: utils.sanitizeString(inquiryData.company || ''),
        message: utils.sanitizeString(inquiryData.message),
        productId: inquiryData.productId || '',
        productName: utils.sanitizeString(inquiryData.productName || ''),
        source: inquiryData.source || 'website',
        status: 'pending',
        priority: inquiryData.priority || 'normal',
        tags: inquiryData.tags || [],
        notes: '',
        createdAt: utils.getISOString(),
        updatedAt: utils.getISOString(),
        respondedAt: null,
        clientInfo: {
          userAgent: inquiryData.userAgent || '',
          ip: inquiryData.ip || '',
          referer: inquiryData.referer || ''
        }
      };

      // Ê∑ªÂä†Âà∞ËØ¢‰ª∑ÂàóË°®
      inquiries.unshift(newInquiry); // Êñ∞ËØ¢‰ª∑ÊîæÂú®ÊúÄÂâçÈù¢

      // ‰øùÂ≠òÊï∞ÊçÆ
      if (this.write(inquiries)) {
        return {
          success: true,
          data: newInquiry
        };
      } else {
        return {
          success: false,
          errors: ['‰øùÂ≠òËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•']
        };
      }
    } catch (error) {
      console.error('ÂàõÂª∫ËØ¢‰ª∑Â§±Ë¥•:', error);
      return {
        success: false,
        errors: ['ÂàõÂª∫ËØ¢‰ª∑Êó∂ÂèëÁîüÈîôËØØ']
      };
    }
  }

  /**
   * Êõ¥Êñ∞ËØ¢‰ª∑Áä∂ÊÄÅ
   * @param {string} id - ËØ¢‰ª∑ID
   * @param {string} status - Êñ∞Áä∂ÊÄÅ
   * @param {string} notes - Â§áÊ≥®
   * @returns {Object} Êõ¥Êñ∞ÁªìÊûú
   */
  updateStatus(id, status, notes = '') {
    try {
      const inquiries = this.read();
      const inquiryIndex = inquiries.findIndex(i => i.id === id);

      if (inquiryIndex === -1) {
        return {
          success: false,
          errors: ['ËØ¢‰ª∑ËÆ∞ÂΩï‰∏çÂ≠òÂú®']
        };
      }

      const validStatuses = ['pending', 'processing', 'completed', 'cancelled'];
      if (!validStatuses.includes(status)) {
        return {
          success: false,
          errors: ['Êó†ÊïàÁöÑÁä∂ÊÄÅÂÄº']
        };
      }

      // Êõ¥Êñ∞ËØ¢‰ª∑
      const updatedInquiry = {
        ...inquiries[inquiryIndex],
        status: status,
        notes: utils.sanitizeString(notes),
        updatedAt: utils.getISOString()
      };

      // Â¶ÇÊûúÁä∂ÊÄÅÂèò‰∏∫Â∑≤Â§ÑÁêÜÔºåËÆ∞ÂΩïÂìçÂ∫îÊó∂Èó¥
      if (status === 'completed' && inquiries[inquiryIndex].status !== 'completed') {
        updatedInquiry.respondedAt = utils.getISOString();
      }

      inquiries[inquiryIndex] = updatedInquiry;

      // ‰øùÂ≠òÊï∞ÊçÆ
      if (this.write(inquiries)) {
        return {
          success: true,
          data: updatedInquiry
        };
      } else {
        return {
          success: false,
          errors: ['‰øùÂ≠òËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•']
        };
      }
    } catch (error) {
      console.error('Êõ¥Êñ∞ËØ¢‰ª∑Áä∂ÊÄÅÂ§±Ë¥•:', error);
      return {
        success: false,
        errors: ['Êõ¥Êñ∞ËØ¢‰ª∑Áä∂ÊÄÅÊó∂ÂèëÁîüÈîôËØØ']
      };
    }
  }

  /**
   * Âà†Èô§ËØ¢‰ª∑
   * @param {string} id - ËØ¢‰ª∑ID
   * @returns {Object} Âà†Èô§ÁªìÊûú
   */
  delete(id) {
    try {
      const inquiries = this.read();
      const inquiryIndex = inquiries.findIndex(i => i.id === id);

      if (inquiryIndex === -1) {
        return {
          success: false,
          errors: ['ËØ¢‰ª∑ËÆ∞ÂΩï‰∏çÂ≠òÂú®']
        };
      }

      const deletedInquiry = inquiries[inquiryIndex];
      inquiries.splice(inquiryIndex, 1);

      // ‰øùÂ≠òÊï∞ÊçÆ
      if (this.write(inquiries)) {
        return {
          success: true,
          data: deletedInquiry
        };
      } else {
        return {
          success: false,
          errors: ['‰øùÂ≠òËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•']
        };
      }
    } catch (error) {
      console.error('Âà†Èô§ËØ¢‰ª∑Â§±Ë¥•:', error);
      return {
        success: false,
        errors: ['Âà†Èô§ËØ¢‰ª∑Êó∂ÂèëÁîüÈîôËØØ']
      };
    }
  }

  /**
   * Ê∏ÖÁ©∫ÊâÄÊúâËØ¢‰ª∑Êï∞ÊçÆ
   * @returns {Object} Ê∏ÖÁ©∫ÁªìÊûú
   */
  clearAll() {
    try {
      if (this.write([])) {
        return {
          success: true,
          message: 'ÊâÄÊúâËØ¢‰ª∑Êï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫'
        };
      } else {
        return {
          success: false,
          errors: ['Ê∏ÖÁ©∫ËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•']
        };
      }
    } catch (error) {
      console.error('Ê∏ÖÁ©∫ËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•:', error);
      return {
        success: false,
        errors: ['Ê∏ÖÁ©∫ËØ¢‰ª∑Êï∞ÊçÆÊó∂ÂèëÁîüÈîôËØØ']
      };
    }
  }

  /**
   * Ëé∑ÂèñËØ¢‰ª∑ÁªüËÆ°‰ø°ÊÅØ
   * @returns {Object} ÁªüËÆ°‰ø°ÊÅØ
   */
  getInquiryStats() {
    try {
      const inquiries = this.read();
      
      const stats = {
        total: inquiries.length,
        pending: inquiries.filter(i => i.status === 'pending').length,
        processing: inquiries.filter(i => i.status === 'processing').length,
        completed: inquiries.filter(i => i.status === 'completed').length,
        cancelled: inquiries.filter(i => i.status === 'cancelled').length,
        sources: {},
        recentInquiries: inquiries.slice(0, 10), // ÊúÄËøë10Êù°ËØ¢‰ª∑
        avgResponseTime: 0
      };

      // Êù•Ê∫êÁªüËÆ°
      inquiries.forEach(inquiry => {
        const source = inquiry.source || 'unknown';
        stats.sources[source] = (stats.sources[source] || 0) + 1;
      });

      // ËÆ°ÁÆóÂπ≥ÂùáÂìçÂ∫îÊó∂Èó¥ÔºàÂ∑≤ÂÆåÊàêÁöÑËØ¢‰ª∑Ôºâ
      const completedInquiries = inquiries.filter(i => 
        i.status === 'completed' && i.respondedAt && i.createdAt
      );

      if (completedInquiries.length > 0) {
        const totalResponseTime = completedInquiries.reduce((total, inquiry) => {
          const created = new Date(inquiry.createdAt);
          const responded = new Date(inquiry.respondedAt);
          return total + (responded - created);
        }, 0);

        stats.avgResponseTime = Math.round(totalResponseTime / completedInquiries.length / (1000 * 60 * 60)); // Â∞èÊó∂
      }

      return stats;
    } catch (error) {
      console.error('Ëé∑ÂèñËØ¢‰ª∑ÁªüËÆ°Â§±Ë¥•:', error);
      return null;
    }
  }

  /**
   * ÂØºÂá∫ËØ¢‰ª∑Êï∞ÊçÆ
   * @param {Object} options - ÂØºÂá∫ÈÄâÈ°π
   * @returns {Array} ÂØºÂá∫Êï∞ÊçÆ
   */
  exportData(options = {}) {
    try {
      const { format = 'json', dateRange = null } = options;
      let inquiries = this.read();

      // Êó•ÊúüËåÉÂõ¥Á≠õÈÄâ
      if (dateRange && dateRange.start && dateRange.end) {
        const startDate = new Date(dateRange.start);
        const endDate = new Date(dateRange.end);
        inquiries = inquiries.filter(inquiry => {
          const createdDate = new Date(inquiry.createdAt);
          return createdDate >= startDate && createdDate <= endDate;
        });
      }

      if (format === 'csv') {
        // ËΩ¨Êç¢‰∏∫CSVÊ†ºÂºèÁöÑÊï∞ÊçÆ
        return inquiries.map(inquiry => ({
          ID: inquiry.id,
          ÂßìÂêç: inquiry.name,
          ÈÇÆÁÆ±: inquiry.email,
          ÁîµËØù: inquiry.phone,
          ÂÖ¨Âè∏: inquiry.company,
          ËØ¢‰ª∑ÂÜÖÂÆπ: inquiry.message,
          ‰∫ßÂìÅÂêçÁß∞: inquiry.productName,
          Áä∂ÊÄÅ: this.getStatusText(inquiry.status),
          Êù•Ê∫ê: inquiry.source,
          ÂàõÂª∫Êó∂Èó¥: utils.getLocalTimestamp(new Date(inquiry.createdAt)),
          Êõ¥Êñ∞Êó∂Èó¥: utils.getLocalTimestamp(new Date(inquiry.updatedAt))
        }));
      }

      return inquiries;
    } catch (error) {
      console.error('ÂØºÂá∫ËØ¢‰ª∑Êï∞ÊçÆÂ§±Ë¥•:', error);
      return [];
    }
  }

  /**
   * Ëé∑ÂèñÁä∂ÊÄÅÊñáÊú¨
   * @param {string} status - Áä∂ÊÄÅÂÄº
   * @returns {string} Áä∂ÊÄÅÊñáÊú¨
   */
  getStatusText(status) {
    const statusMap = {
      pending: 'ÂæÖÂ§ÑÁêÜ',
      processing: 'Â§ÑÁêÜ‰∏≠',
      completed: 'Â∑≤ÂÆåÊàê',
      cancelled: 'Â∑≤ÂèñÊ∂à'
    };
    return statusMap[status] || status;
  }
  /**
   * Êõ¥Êñ∞ËØ¢‰ª∑ËÆ∞ÂΩï
   * @param {string} id - ËØ¢‰ª∑ID
   * @param {Object} updateData - Êõ¥Êñ∞Êï∞ÊçÆ
   * @returns {Object} Êõ¥Êñ∞ÁªìÊûú
   */
  async update(id, updateData) {
    try {
      const inquiries = this.read();
      const index = inquiries.findIndex(inquiry => inquiry.id === id);
      
      if (index === -1) {
        return {
          success: false,
          errors: ['ËØ¢‰ª∑ËÆ∞ÂΩï‰∏çÂ≠òÂú®']
        };
      }
      
      // Êõ¥Êñ∞Êï∞ÊçÆ
      inquiries[index] = {
        ...inquiries[index],
        ...updateData,
        updatedAt: new Date().toISOString()
      };
      
      // ÂÜôÂÖ•Êñá‰ª∂
      const writeResult = this.write(inquiries);
      if (!writeResult.success) {
        return writeResult;
      }
      
      return {
        success: true,
        message: 'ËØ¢‰ª∑Êõ¥Êñ∞ÊàêÂäü',
        data: inquiries[index]
      };
    } catch (error) {
      console.error('Êõ¥Êñ∞ËØ¢‰ª∑Â§±Ë¥•:', error);
      return {
        success: false,
        errors: [error.message]
      };
    }
  }


}

module.exports = InquiryDao;
