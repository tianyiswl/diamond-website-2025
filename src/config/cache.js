// üöÄ ÁºìÂ≠òÁ≥ªÁªüÈÖçÁΩÆÊ®°Âùó
// ÁÆ°ÁêÜÊâÄÊúâÁºìÂ≠òÁõ∏ÂÖ≥ÈÖçÁΩÆÂíåÂàùÂßãÂåñ

// Ê≥®ÊÑèÔºöÊöÇÊó∂Ê≥®ÈáäÊéâÂ§ñÈÉ®‰æùËµñÔºåÈÅøÂÖçÂæ™ÁéØÂºïÁî®ÂíåË∑ØÂæÑÈóÆÈ¢ò
// const { ProductCacheManager } = require('../../cache-optimization-implementation.js');
// const { SmartCacheManager } = require('../../performance-optimization.js');

// ÁÆÄÂåñÁöÑÁºìÂ≠òÁÆ°ÁêÜÂô®ÂÆûÁé∞
class ProductCacheManager {
  constructor(options = {}) {
    this.cache = new Map();
    this.timeout = options.timeout || 5 * 60 * 1000;
    this.maxSize = options.maxSize || 100;
    this.stats = { hits: 0, misses: 0 };
  }

  clearCache() {
    this.cache.clear();
  }

  getStats() {
    return { ...this.stats, size: this.cache.size };
  }
}

class SmartCacheManager {
  constructor(options = {}) {
    this.cache = new Map();
    this.ttl = options.ttl || 5 * 60 * 1000;
    this.maxSize = options.maxSize || 100;
    this.stats = { hits: 0, misses: 0 };
  }

  clear() {
    this.cache.clear();
  }

  getStats() {
    return { ...this.stats, size: this.cache.size };
  }
}

const cacheConfig = {
  // ‰∫ßÂìÅÁºìÂ≠òÈÖçÁΩÆ
  product: {
    timeout: 5 * 60 * 1000, // 5ÂàÜÈíüÁºìÂ≠ò
    maxSize: 100,
    enabled: true
  },

  // Êô∫ËÉΩÊñá‰ª∂ÁºìÂ≠òÈÖçÁΩÆ
  smart: {
    ttl: 5 * 60 * 1000, // 5ÂàÜÈíüTTL
    maxSize: 100,
    enabled: true
  },

  // ÂÜÖÂ≠òÁºìÂ≠òÈÖçÁΩÆ
  memory: {
    ttl: 5 * 60 * 1000, // 5ÂàÜÈíüÁºìÂ≠ò
    maxSize: 1000,
    enabled: true
  },

  // ÈùôÊÄÅÊñá‰ª∂ÁºìÂ≠òÈÖçÁΩÆ
  static: {
    maxAge: process.env.NODE_ENV === 'production' ? '1d' : '0',
    etag: true,
    lastModified: true
  }
};

// ÁºìÂ≠òÁÆ°ÁêÜÂô®ÂÆû‰æã
let productCacheManager = null;
let smartCacheManager = null;
let fileCache = null;

// ÂàùÂßãÂåñÁºìÂ≠òÁ≥ªÁªü
const initializeCache = () => {
  try {
    console.log('üîß ÂºÄÂßãÂàùÂßãÂåñÁºìÂ≠òÁ≥ªÁªü...');

    // ÊöÇÊó∂Á¶ÅÁî®Â§çÊùÇÁöÑÁºìÂ≠òÁÆ°ÁêÜÂô®ÔºåÈÅøÂÖçÂêØÂä®Êó∂ÁöÑÈóÆÈ¢ò
    // Âè™‰ΩøÁî®ÁÆÄÂçïÁöÑÂÜÖÂ≠òÁºìÂ≠ò
    if (cacheConfig.memory.enabled) {
      fileCache = new Map();
      console.log('‚úÖ ÂÜÖÂ≠òÁºìÂ≠òÂàùÂßãÂåñÊàêÂäü');
    }

    console.log('üöÄ ÁºìÂ≠òÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê');
    return true;
  } catch (error) {
    console.error('‚ùå ÁºìÂ≠òÁ≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•:', error);
    return false;
  }
};

// Ëé∑ÂèñÁºìÂ≠òÁÆ°ÁêÜÂô®ÂÆû‰æã
const getCacheManagers = () => {
  return {
    productCacheManager,
    smartCacheManager,
    fileCache
  };
};

// Ê∏ÖÁêÜÊâÄÊúâÁºìÂ≠ò
const clearAllCache = () => {
  try {
    if (productCacheManager) {
      productCacheManager.clearCache();
    }
    if (smartCacheManager) {
      smartCacheManager.clear();
    }
    if (fileCache) {
      fileCache.clear();
    }
    console.log('üßπ ÊâÄÊúâÁºìÂ≠òÂ∑≤Ê∏ÖÁêÜ');
    return true;
  } catch (error) {
    console.error('‚ùå Ê∏ÖÁêÜÁºìÂ≠òÂ§±Ë¥•:', error);
    return false;
  }
};

// Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
const getCacheStats = () => {
  const stats = {
    product: null,
    smart: null,
    memory: null
  };

  try {
    if (productCacheManager) {
      stats.product = productCacheManager.getStats();
    }
    if (smartCacheManager) {
      stats.smart = smartCacheManager.getStats();
    }
    if (fileCache) {
      stats.memory = {
        size: fileCache.size,
        maxSize: cacheConfig.memory.maxSize
      };
    }
  } catch (error) {
    console.error('‚ùå Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°Â§±Ë¥•:', error);
  }

  return stats;
};

module.exports = {
  config: cacheConfig,
  initializeCache,
  getCacheManagers,
  clearAllCache,
  getCacheStats
};
