// üìÅ Êñá‰ª∂Êìç‰ΩúÂ∑•ÂÖ∑Ê®°Âùó
// Êèê‰æõÊñá‰ª∂ÂíåÁõÆÂΩïÊìç‰ΩúÁöÑÈÄöÁî®ÂäüËÉΩ

const fs = require('fs');
const path = require('path');

/**
 * Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂàõÂª∫
 * @param {string} dirPath - ÁõÆÂΩïË∑ØÂæÑ
 * @returns {boolean} ÊòØÂê¶ÊàêÂäü
 */
const ensureDirectoryExists = (dirPath) => {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ ÂàõÂª∫ÁõÆÂΩï: ${dirPath}`);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå ÂàõÂª∫ÁõÆÂΩïÂ§±Ë¥• ${dirPath}:`, error.message);
    return false;
  }
};

/**
 * ËØªÂèñJSONÊñá‰ª∂
 * @param {string} filePath - Êñá‰ª∂Ë∑ØÂæÑ
 * @param {*} defaultValue - ÈªòËÆ§ÂÄºÔºàÊñá‰ª∂‰∏çÂ≠òÂú®Êó∂ËøîÂõûÔºâ
 * @returns {*} Ëß£ÊûêÂêéÁöÑJSONÂØπË±°ÊàñÈªòËÆ§ÂÄº
 */
const readJsonFile = (filePath, defaultValue = null) => {
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è Êñá‰ª∂‰∏çÂ≠òÂú®: ${filePath}`);
      return defaultValue;
    }
    
    const fileContent = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(fileContent);
  } catch (error) {
    console.error(`‚ùå ËØªÂèñJSONÊñá‰ª∂Â§±Ë¥•: ${filePath}`, error.message);
    return defaultValue;
  }
};

/**
 * ÂÜôÂÖ•JSONÊñá‰ª∂
 * @param {string} filePath - Êñá‰ª∂Ë∑ØÂæÑ
 * @param {*} data - Ë¶ÅÂÜôÂÖ•ÁöÑÊï∞ÊçÆ
 * @param {boolean} createDir - ÊòØÂê¶Ëá™Âä®ÂàõÂª∫ÁõÆÂΩï
 * @returns {boolean} ÊòØÂê¶ÊàêÂäü
 */
const writeJsonFile = (filePath, data, createDir = true) => {
  try {
    // Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
    if (createDir) {
      const dir = path.dirname(filePath);
      ensureDirectoryExists(dir);
    }
    
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    return true;
  } catch (error) {
    console.error(`‚ùå ÂÜôÂÖ•JSONÊñá‰ª∂Â§±Ë¥• ${filePath}:`, error.message);
    return false;
  }
};

/**
 * Â§á‰ªΩÊñá‰ª∂
 * @param {string} filePath - ÂéüÊñá‰ª∂Ë∑ØÂæÑ
 * @param {string} backupDir - Â§á‰ªΩÁõÆÂΩï
 * @returns {string|null} Â§á‰ªΩÊñá‰ª∂Ë∑ØÂæÑÊàñnullÔºàÂ§±Ë¥•Êó∂Ôºâ
 */
const backupFile = (filePath, backupDir = './backup') => {
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è Ê∫êÊñá‰ª∂‰∏çÂ≠òÂú®: ${filePath}`);
      return null;
    }
    
    ensureDirectoryExists(backupDir);
    
    const fileName = path.basename(filePath);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = path.join(backupDir, `${fileName}.backup-${timestamp}`);
    
    fs.copyFileSync(filePath, backupPath);
    console.log(`üìã Êñá‰ª∂Â§á‰ªΩÊàêÂäü: ${backupPath}`);
    return backupPath;
  } catch (error) {
    console.error(`‚ùå Êñá‰ª∂Â§á‰ªΩÂ§±Ë¥• ${filePath}:`, error.message);
    return null;
  }
};

/**
 * Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞èÔºàÂ≠óËäÇÔºâ
 * @param {string} filePath - Êñá‰ª∂Ë∑ØÂæÑ
 * @returns {number} Êñá‰ª∂Â§ßÂ∞èÊàñ-1ÔºàÂ§±Ë¥•Êó∂Ôºâ
 */
const getFileSize = (filePath) => {
  try {
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    console.error(`‚ùå Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞èÂ§±Ë¥• ${filePath}:`, error.message);
    return -1;
  }
};

/**
 * Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
 * @param {number} bytes - Â≠óËäÇÊï∞
 * @returns {string} Ê†ºÂºèÂåñÁöÑÊñá‰ª∂Â§ßÂ∞è
 */
const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

/**
 * Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
 * @param {string} filePath - Êñá‰ª∂Ë∑ØÂæÑ
 * @returns {boolean} Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
 */
const fileExists = (filePath) => {
  return fs.existsSync(filePath);
};

/**
 * Âà†Èô§Êñá‰ª∂
 * @param {string} filePath - Êñá‰ª∂Ë∑ØÂæÑ
 * @returns {boolean} ÊòØÂê¶ÊàêÂäü
 */
const deleteFile = (filePath) => {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`üóëÔ∏è Êñá‰ª∂Âà†Èô§ÊàêÂäü: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Êñá‰ª∂Âà†Èô§Â§±Ë¥• ${filePath}:`, error.message);
    return false;
  }
};

/**
 * Ëé∑ÂèñÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂
 * @param {string} dirPath - ÁõÆÂΩïË∑ØÂæÑ
 * @param {string[]} extensions - Êñá‰ª∂Êâ©Â±ïÂêçËøáÊª§ÔºàÂèØÈÄâÔºâ
 * @returns {string[]} Êñá‰ª∂Ë∑ØÂæÑÊï∞ÁªÑ
 */
const getFilesInDirectory = (dirPath, extensions = []) => {
  try {
    if (!fs.existsSync(dirPath)) {
      return [];
    }
    
    const files = fs.readdirSync(dirPath);
    let result = files.map(file => path.join(dirPath, file));
    
    // ËøáÊª§Êñá‰ª∂ÔºàÊéíÈô§ÁõÆÂΩïÔºâ
    result = result.filter(filePath => fs.statSync(filePath).isFile());
    
    // ÊåâÊâ©Â±ïÂêçËøáÊª§
    if (extensions.length > 0) {
      result = result.filter(filePath => {
        const ext = path.extname(filePath).toLowerCase();
        return extensions.includes(ext);
      });
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå Ëé∑ÂèñÁõÆÂΩïÊñá‰ª∂Â§±Ë¥• ${dirPath}:`, error.message);
    return [];
  }
};

/**
 * Ê∏ÖÁêÜÊóßÁöÑÂ§á‰ªΩÊñá‰ª∂
 * @param {string} backupDir - Â§á‰ªΩÁõÆÂΩï
 * @param {number} maxBackups - ÊúÄÂ§ß‰øùÁïôÂ§á‰ªΩÊï∞
 * @returns {number} Âà†Èô§ÁöÑÊñá‰ª∂Êï∞
 */
const cleanupOldBackups = (backupDir, maxBackups = 10) => {
  try {
    if (!fs.existsSync(backupDir)) {
      return 0;
    }
    
    const files = fs.readdirSync(backupDir)
      .filter(file => file.includes('.backup-'))
      .map(file => ({
        name: file,
        path: path.join(backupDir, file),
        mtime: fs.statSync(path.join(backupDir, file)).mtime
      }))
      .sort((a, b) => b.mtime - a.mtime); // Êåâ‰øÆÊîπÊó∂Èó¥ÈôçÂ∫èÊéíÂàó
    
    let deletedCount = 0;
    if (files.length > maxBackups) {
      const filesToDelete = files.slice(maxBackups);
      filesToDelete.forEach(file => {
        if (deleteFile(file.path)) {
          deletedCount++;
        }
      });
    }
    
    return deletedCount;
  } catch (error) {
    console.error(`‚ùå Ê∏ÖÁêÜÂ§á‰ªΩÊñá‰ª∂Â§±Ë¥• ${backupDir}:`, error.message);
    return 0;
  }
};

module.exports = {
  ensureDirectoryExists,
  readJsonFile,
  writeJsonFile,
  backupFile,
  getFileSize,
  formatFileSize,
  fileExists,
  deleteFile,
  getFilesInDirectory,
  cleanupOldBackups
};
